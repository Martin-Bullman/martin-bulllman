# GitHub action to deploy martinbullmanapp frontend.

name: deploy frontend

on:
  # trigger workflow on pushes to the main branch or pull requests targeting the main branch.
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # set environment variables for node.js version and github context values.
  node_version: 20
  github_sha: ${{ github.sha }}
  github_ref: ${{ github.ref }}

jobs:
  build:
    # build job runs on the latest ubuntu environment.
    runs-on: ubuntu-latest

    steps:
      # step 1: checkout the code from the repository.
      - name: checkout code
        uses: actions/checkout@v4

      # step 2: install necessary dependencies for the frontend project.
      - name: install dependencies
        working-directory: ./frontend
        run: npm install --omit=dev

      # step 3: build the frontend application.
      - name: build application
        working-directory: ./frontend
        run: npm run build

      # step 4: archive the build output into a tarball.
      - name: archive artifacts
        working-directory: ./frontend/
        run: tar czf ../"${{ env.github_sha }}".tar.gz .output

      # step 5: list the contents of the build directory for debugging.
      - name: list build output
        run: ls -lah

      # step 6: upload the archived artifacts for later use in deployment.
      - name: store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-artifacts
          path: ${{ env.github_sha }}.tar.gz

  deploy:
    # deployment job depends on the build job.
    needs: build
    runs-on: ubuntu-latest

    steps:
      # step 1: download the build artifacts from the build job.
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-artifacts
          path: ./downloaded-artifacts

      # step 2: add the ssh key to establish a secure connection to the server.
#      - name: add ssh key
#        env:
#          ssh_auth_sock: /tmp/ssh_agent.sock
#        run: |  
#          mkdir -p /home/runner/.ssh
#          ssh-keyscan "${{ secrets.lightsail_host }}" >> /home/runner/.ssh/known_hosts
#          echo "${{ secrets.lightsail_ssh_key }}" > /home/runner/.ssh/github_actions
#          chmod 600 /home/runner/.ssh/github_actions
#          ssh-agent -a $ssh_auth_sock > /dev/null
#          ssh-add /home/runner/.ssh/github_actions

      # step 3: copy the archived artifacts to the remote server.
      - name: deploy artifacts
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.lightsail_host }}
          username: ubuntu
          key: ${{ secrets.lightsail_ssh_key }}
          target: /home/ubuntu
          source: ./downloaded-artifacts/${{ env.github_sha }}.tar.gz

      # step 4: extract the artifacts and restart the application.
      - name: extract artifacts
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.lightsail_host }}
          username: ${{ secrets.lightsail_user }}
          key: ${{ secrets.lightsail_ssh_key }}
          script: |
            set -e # exit on any command failure
            mkdir -p "/home/ubuntu/releases/${{ env.github_sha }}"
            tar xzf "/home/ubuntu/downloaded-artifacts/${{ env.github_sha }}.tar.gz" \
              -c "/home/ubuntu/martinbullmanapp/frontend"
            cp -r "/home/ubuntu/martinbullmanapp/frontend/.output" \
              "/home/ubuntu/releases/${{ env.github_sha }}"
            
            # ensure node.js environment is loaded
            export nvm_dir="$home/.nvm"
            [ -s "$nvm_dir/nvm.sh" ] && \. "$nvm_dir/nvm.sh"
            nvm use 20.13.1
            
            # restart the application using pm2
            /home/ubuntu/.nvm/versions/node/v20.13.1/bin/pm2 restart all
